const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const config = JSON.parse(fs.readFileSync(path.join(__dirname, 'config.json'), 'utf8'));

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(config.telegram.botToken, { polling: true });

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ Chat ID –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  config.telegram.chatId = chatId.toString();
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
  try {
    fs.writeFileSync(path.join(__dirname, 'config.json'), JSON.stringify(config, null, 2));
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Chat ID:`, error.message);
  }
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
  if (text === 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤') {
    await showStatus(chatId);
  } else if (text === 'üîÑ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞') {
    await runManualCheck(chatId);
  } else if (text === '‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏') {
    await showAccountManagement(chatId);
  } else if (text.startsWith('/start ')) {
    const command = text.replace('/start ', '');
    if (command.startsWith('disable_')) {
      const username = command.replace('disable_', '');
      await toggleAccountStatus(chatId, username, false);
    } else if (command.startsWith('enable_')) {
      const username = command.replace('enable_', '');
      await toggleAccountStatus(chatId, username, true);
    } else if (command === 'manual_check') {
      await runManualCheck(chatId);
    } else {
      showMainMenu(chatId);
    }
  } else if (text.includes('disable_')) {
    const match = text.match(/disable_(.+)/);
    if (match) {
      const username = match[1];
      await toggleAccountStatus(chatId, username, false);
    }
  } else if (text.includes('enable_')) {
    const match = text.match(/enable_(.+)/);
    if (match) {
      const username = match[1];
      await toggleAccountStatus(chatId, username, true);
    }
  } else if (text === 'manual_check') {
    await runManualCheck(chatId);
  } else {
    // –î–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    showMainMenu(chatId);
  }
});

// –û–±—Ä–æ–±–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  try {
    if (data.startsWith('disable_')) {
      const username = data.replace('disable_', '');
      await toggleAccountStatus(chatId, username, false);
    } else if (data.startsWith('enable_')) {
      const username = data.replace('enable_', '');
      await toggleAccountStatus(chatId, username, true);
    } else if (data === 'back_to_menu') {
      showMainMenu(chatId);
    } else if (data === 'manual_check') {
      await runManualCheck(chatId);
    }
    
    // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback query:', error.message);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É' });
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ polling
bot.on('polling_error', (error) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ polling Telegram –±–æ—Ç–∞:', error.message);
  
  // –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    bot.stopPolling().then(() => {
      setTimeout(() => {
        bot.startPolling().catch(err => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É polling:', err.message);
        });
      }, 1000);
    }).catch(err => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ polling:', err.message);
    });
  }, 5000);
});

// –ü—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é
bot.on('polling_start', () => {
  if (config.telegram.chatId && config.telegram.chatId !== 'YOUR_CHAT_ID') {
    showMainMenu(config.telegram.chatId);
  }
});

bot.on('polling_stop', () => {
  // –ë–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu(chatId) {
  const welcomeMessage = `üéµ Last.fm –ú–æ–Ω—ñ—Ç–æ—Ä

üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ ${config.users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
${config.users.map(user => `‚Ä¢ ${user.username}`).join('\n')}

‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
‚è±Ô∏è –ü–æ—Ä—ñ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: ${config.inactivityThreshold.minutes} —Ö–≤–∏–ª–∏–Ω`;

  const keyboard = {
    keyboard: [
      ['üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', 'üîÑ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞'],
      ['‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };

  bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É
async function showStatus(chatId) {
  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
  for (const user of config.users) {
    if (!user.disabled) {
      await checkUserActivity(user);
    }
  }
  
  let statusMessage = `üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n`;
  
  for (const user of config.users) {
    if (user.disabled) {
      statusMessage += `${user.username} ‚è∏Ô∏è\n`;
    } else {
      const userState = userStates.get(user.username);
      if (userState === 'active') {
        statusMessage += `${user.username} ‚úÖ\n`;
      } else if (userState === 'inactive') {
        const inactiveData = inactiveUsersData.get(user.username);
        if (inactiveData) {
          statusMessage += `${user.username} ‚ùå (${inactiveData.timeInactive})\n`;
        } else {
          statusMessage += `${user.username} ‚ùå\n`;
        }
      } else {
        statusMessage += `${user.username} ‚úÖ\n`;
      }
    }
  }
  
  bot.sendMessage(chatId, statusMessage);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏
async function showAccountManagement(chatId) {
  // –°—Ç–≤–æ—Ä—é—î–º–æ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const keyboard = {
    inline_keyboard: []
  };
  
  for (const user of config.users) {
    const userState = userStates.get(user.username);
    let statusText = '';
    
    if (user.disabled) {
      statusText = '‚è∏Ô∏è';
    } else if (userState === 'inactive') {
      const inactiveData = inactiveUsersData.get(user.username);
      if (inactiveData) {
        statusText = `‚ùå (${inactiveData.timeInactive})`;
      } else {
        statusText = '‚ùå';
      }
    } else {
      statusText = '‚úÖ';
    }
    
    if (user.disabled) {
      keyboard.inline_keyboard.push([{
        text: `–£–≤—ñ–º: ${user.username} ${statusText}`,
        callback_data: `enable_${user.username}`
      }]);
    } else {
      keyboard.inline_keyboard.push([{
        text: `–í–∏–º: ${user.username} ${statusText}`,
        callback_data: `disable_${user.username}`
      }]);
    }
  }
  
  const message = `‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:`;
  bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async function runManualCheck(chatId) {
  await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...');
  await checkAllUsers();
}


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–∫–∞—É–Ω—Ç–∞
async function toggleAccountStatus(chatId, username, enabled) {
  const user = config.users.find(u => u.username === username);
  
  if (!user) {
    await bot.sendMessage(chatId, `‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á "${username}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!`);
    return;
  }
  
  user.disabled = !enabled;
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
  try {
    fs.writeFileSync(path.join(__dirname, 'config.json'), JSON.stringify(config, null, 2));
    
    const status = enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
    await bot.sendMessage(chatId, `‚úÖ –ê–∫–∞—É–Ω—Ç "${username}" ${status}!`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    await showAccountManagement(chatId);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:`, error.message);
    await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!`);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function formatInactiveUsersTable() {
  if (inactiveUsersData.size === 0) {
    return null;
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —á–∞—Å–æ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–≤—ñ–¥ –±—ñ–ª—å—à–æ–≥–æ –¥–æ –º–µ–Ω—à–æ–≥–æ)
  const sortedInactiveUsers = Array.from(inactiveUsersData.values())
    .sort((a, b) => b.minutesInactive - a.minutesInactive);
  
  let tableMessage = `‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ Last.fm –ø—Ä–æ—Ñ—ñ–ª—ñ:\n\n`;
  
  for (const user of sortedInactiveUsers) {
    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–µ —ñ–º'—è
    const clickableLink = `<a href="${user.lastfmProfile}">${user.lastfmUsername}</a>`;
    
    // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –¥–ª—è API –ø–æ–º–∏–ª–æ–∫
    const statusIcon = user.isApiError ? 'üî¥' : 'üçå';
    
    tableMessage += `${statusIcon} <b>${user.username}</b> | ${clickableLink}\n‚è±Ô∏è ${user.timeInactive}\n`;
  }
  
  return tableMessage;
}



// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–∫—Ç–∏–≤–Ω–∏–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
const userStates = new Map();

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const inactiveUsersData = new Map();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç—Ä–µ–∫—É –∑ Last.fm API
async function getLastTrack(username) {
  try {
    const response = await axios.get('http://ws.audioscrobbler.com/2.0/', {
      params: {
        method: 'user.getrecenttracks',
        user: username,
        api_key: config.lastfm.apiKey,
        format: 'json',
        limit: 1
      },
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (!response.data || !response.data.recenttracks || !response.data.recenttracks.track) {
      return null;
    }

    const tracks = response.data.recenttracks.track;
    
    // –Ø–∫—â–æ tracks - –º–∞—Å–∏–≤
    if (Array.isArray(tracks) && tracks.length > 0) {
      const lastTrack = tracks[0];
      return processTrackData(lastTrack, username);
    }
    
    // –Ø–∫—â–æ tracks - –æ–±'—î–∫—Ç (–æ–¥–∏–Ω —Ç—Ä–µ–∫)
    if (tracks && typeof tracks === 'object') {
      return processTrackData(tracks, username);
    }
    
    return null;
    
  } catch (error) {
    return null;
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç—Ä–µ–∫—É
function processTrackData(track, username) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–∫ –∑–∞—Ä–∞–∑ –≥—Ä–∞—î
    const isNowPlaying = track['@attr'] && track['@attr'].nowplaying === 'true';
    
    if (isNowPlaying) {
      return {
        timestamp: 0, // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è now playing
        track: track.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫',
        artist: track.artist && track.artist['#text'] ? track.artist['#text'] : '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å',
        isNowPlaying: true
      };
    }
    
    // –Ø–∫—â–æ —Ç—Ä–µ–∫ –Ω–µ –≥—Ä–∞—î –∑–∞—Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–∞–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
    if (!track.date || !track.date.uts) {
      return {
        timestamp: Math.floor(Date.now() / 1000),
        track: track.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫',
        artist: track.artist && track.artist['#text'] ? track.artist['#text'] : '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å',
        isNowPlaying: false
      };
    }
    
    const timestamp = parseInt(track.date.uts);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ timestamp –≤–∞–ª—ñ–¥–Ω–∏–π
    if (isNaN(timestamp) || timestamp < 1000000000) {
      // –Ø–∫—â–æ timestamp –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
      return {
        timestamp: Math.floor(Date.now() / 1000),
        track: track.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫',
        artist: track.artist && track.artist['#text'] ? track.artist['#text'] : '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å',
        isNowPlaying: false
      };
    }
    
    return {
      timestamp: timestamp,
      track: track.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫',
      artist: track.artist && track.artist['#text'] ? track.artist['#text'] : '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å',
      isNowPlaying: false
    };
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function checkUserActivity(user) {
  const username = user.username;
  const lastfmUsername = user.lastfmProfile.split('/').pop(); // –û—Ç—Ä–∏–º—É—î–º–æ username –∑ URL
  
  try {
    const lastTrackData = await getLastTrack(lastfmUsername);
    
    if (!lastTrackData) {
      // –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –≤–≤–∞–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º
      const wasPreviouslyActive = userStates.get(username) === 'active';
      userStates.set(username, 'inactive');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ API
      if (wasPreviouslyActive) {
        inactiveUsersData.set(username, {
          username: username,
          lastfmProfile: user.lastfmProfile,
          lastfmUsername: lastfmUsername,
          timeInactive: 'API –ø–æ–º–∏–ª–∫–∞',
          minutesInactive: 999999,
          isApiError: true
        });
      }
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
      if (!userStates.get(username + '_initialized')) {
        userStates.set(username + '_initialized', true);
      }
      return;
    }
    
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ —Å–ª—É—Ö–∞—î –º—É–∑–∏–∫—É, –≤—ñ–Ω —Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π
    if (lastTrackData.isNowPlaying) {
      userStates.set(username, 'active');
      userStates.set(username + '_initialized', true);
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö, —è–∫—â–æ –±—É–≤ —Ç–∞–º
      inactiveUsersData.delete(username);
      return;
    }
    
    const currentTime = Math.floor(Date.now() / 1000);
    const timeSinceLastTrack = lastTrackData.timestamp === 0 ? 0 : currentTime - lastTrackData.timestamp;
    const thresholdMinutes = config.inactivityThreshold.minutes;
    const thresholdSeconds = thresholdMinutes * 60;
    
    const isCurrentlyInactive = timeSinceLastTrack > thresholdSeconds;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(username, isCurrentlyInactive ? 'inactive' : 'active');
    
    // –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –±—ñ–ª—å—à–µ –ø–æ—Ä–æ–≥—É - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (isCurrentlyInactive) {
      const minutesInactive = Math.floor(timeSinceLastTrack / 60);
      const hoursInactive = Math.floor(minutesInactive / 60);
      const daysInactive = Math.floor(hoursInactive / 24);
      
      let timeMessage = '';
      if (daysInactive > 0) {
        timeMessage = `${daysInactive} –¥ ${hoursInactive % 24} –≥–æ–¥`;
      } else if (hoursInactive > 0) {
        timeMessage = `${hoursInactive} –≥–æ–¥ ${minutesInactive % 60} —Ö–≤`;
      } else {
        timeMessage = `${minutesInactive} —Ö–≤`;
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      inactiveUsersData.set(username, {
        username: username,
        lastfmProfile: user.lastfmProfile,
        lastfmUsername: lastfmUsername,
        timeInactive: timeMessage,
        minutesInactive: minutesInactive
      });
    } else {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö
      inactiveUsersData.delete(username);
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (!userStates.get(username + '_initialized')) {
      userStates.set(username + '_initialized', true);
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username}:`, error.message);
    
    // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤–≤–∞–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º
    userStates.set(username, 'inactive');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function checkAllUsers() {
  let activeUsers = 0;
  let inactiveUsers = 0;
  let errorUsers = 0;
  let disabledUsers = 0;
  
  // –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
  inactiveUsersData.clear();
  
  for (let i = 0; i < config.users.length; i++) {
    const user = config.users[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–º–∫–Ω–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
    if (user.disabled) {
      disabledUsers++;
      continue;
    }
    
    try {
      await checkUserActivity(user);
      
      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const userState = userStates.get(user.username);
      if (userState === 'active') {
        activeUsers++;
      } else if (userState === 'inactive') {
        inactiveUsers++;
      } else {
        errorUsers++;
      }
      
    } catch (error) {
      errorUsers++;
    }
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ API (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    if (i < config.users.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —î–¥–∏–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü–µ—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  if (inactiveUsersData.size > 0 && config.telegram.chatId !== 'YOUR_CHAT_ID') {
    const tableMessage = formatInactiveUsersTable();
    if (tableMessage) {
      try {
        await bot.sendMessage(config.telegram.chatId, tableMessage, { 
          parse_mode: 'HTML',
          disable_web_page_preview: true 
        });
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error.message);
      }
    }
  }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è cron-–∑–∞–≤–¥–∞–Ω–Ω—è
cron.schedule(config.schedule.cron, async () => {
  try {
    await checkAllUsers();
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error.message);
  }
});

// –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ cron —Ä–æ–∑–∫–ª–∞–¥—É

// –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Promise:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', () => {
  bot.stopPolling().then(() => {
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞:', error.message);
    process.exit(1);
  });
});

process.on('SIGTERM', () => {
  bot.stopPolling().then(() => {
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞:', error.message);
    process.exit(1);
  });
}); 