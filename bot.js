const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const config = JSON.parse(fs.readFileSync(path.join(__dirname, 'config.json'), 'utf8'));

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(config.telegram.botToken, { polling: true });

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  if (msg.text === '/start' || msg.text === '/menu') {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ Chat ID –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config.telegram.chatId = chatId.toString();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    fs.writeFileSync(path.join(__dirname, 'config.json'), JSON.stringify(config, null, 2));
    
    showMainMenu(chatId);
  } else {
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ —â–æ—Å—å —ñ–Ω—à–µ, –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é START
    sendWelcomeMessage(chatId);
  }
});

// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é START –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
bot.on('polling_error', (error) => {
  console.error('–ü–æ–º–∏–ª–∫–∞ polling:', error);
});

// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é START
bot.on('polling_start', () => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é START
function sendWelcomeMessage(chatId) {
  const welcomeMessage = `üéµ –í—ñ—Ç–∞—é! –Ø Last.fm Monitor Bot

–Ø –±—É–¥—É –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Last.fm —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö.

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É START —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üöÄ START', callback_data: 'start_bot' }
      ]
    ]
  };

  bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu(chatId) {
  const welcomeMessage = `üéµ Last.fm –ú–æ–Ω—ñ—Ç–æ—Ä

üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ ${config.users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
${config.users.map(user => `‚Ä¢ ${user.username}`).join('\n')}

‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
‚è±Ô∏è –ü–æ—Ä—ñ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: ${config.inactivityThreshold.minutes} —Ö–≤–∏–ª–∏–Ω`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data: 'status' }
      ]
    ]
  };

  bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É
function showStatus(chatId) {
  let statusMessage = `üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n`;
  
  for (const user of config.users) {
    const userState = userStates.get(user.username);
    const status = userState === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π';
    statusMessage += `${user.username}: ${status}\n`;
  }
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìä –°—Ç–∞—Ç—É—Å –∑–Ω–æ–≤—É', callback_data: 'status' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };
  
  bot.sendMessage(chatId, statusMessage, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async function runManualCheck(chatId) {
  bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...');
  
  try {
    await checkAllUsers();
    bot.sendMessage(chatId, '‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query
  await bot.answerCallbackQuery(query.id);
  
  if (data === 'start_bot') {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ Chat ID –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config.telegram.chatId = chatId.toString();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    fs.writeFileSync(path.join(__dirname, 'config.json'), JSON.stringify(config, null, 2));
    
    showMainMenu(chatId);
  } else if (data === 'status') {
    showStatus(chatId);
  } else if (data === 'check') {
    await runManualCheck(chatId);
  } else if (data === 'main_menu') {
    showMainMenu(chatId);
  }
});



// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–∫—Ç–∏–≤–Ω–∏–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
const userStates = new Map();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç—Ä–µ–∫—É –∑ Last.fm API
async function getLastTrack(username) {
  try {
    const response = await axios.get('http://ws.audioscrobbler.com/2.0/', {
      params: {
        method: 'user.getrecenttracks',
        user: username,
        api_key: config.lastfm.apiKey,
        format: 'json',
        limit: 1
      }
    });

    const tracks = response.data.recenttracks.track;
    if (tracks && tracks.length > 0) {
      const lastTrack = tracks[0];
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–∫ –∑–∞—Ä–∞–∑ –≥—Ä–∞—î
      const isNowPlaying = lastTrack['@attr'] && lastTrack['@attr'].nowplaying === 'true';
      
      if (isNowPlaying) {
        return {
          timestamp: Math.floor(Date.now() / 1000),
          track: lastTrack.name,
          artist: lastTrack.artist['#text'],
          isNowPlaying: true
        };
      }
      
      // –Ø–∫—â–æ —Ç—Ä–µ–∫ –Ω–µ –≥—Ä–∞—î –∑–∞—Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–∞–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
      const timestamp = parseInt(lastTrack.date.uts);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ timestamp –≤–∞–ª—ñ–¥–Ω–∏–π
      if (timestamp < 1000000000) {
        console.log(`‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π timestamp –∑ Last.fm –¥–ª—è ${username}: ${timestamp}`);
        console.log(`üîç Raw date data:`, lastTrack.date);
        
        // –Ø–∫—â–æ timestamp –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        return {
          timestamp: Math.floor(Date.now() / 1000),
          track: lastTrack.name,
          artist: lastTrack.artist['#text'],
          isNowPlaying: false
        };
      }
      
      return {
        timestamp: timestamp,
        track: lastTrack.name,
        artist: lastTrack.artist['#text'],
        isNowPlaying: false
      };
    }
    
    return null;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function checkUserActivity(user) {
  const username = user.username;
  const lastfmUsername = user.lastfmProfile.split('/').pop(); // –û—Ç—Ä–∏–º—É—î–º–æ username –∑ URL
  
  const lastTrackData = await getLastTrack(lastfmUsername);
  
  if (!lastTrackData) {
    return;
  }
  
  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ —Å–ª—É—Ö–∞—î –º—É–∑–∏–∫—É, –≤—ñ–Ω —Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π
  if (lastTrackData.isNowPlaying) {
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
    userStates.set(username, 'active');
    return;
  }
  
  const currentTime = Math.floor(Date.now() / 1000);
  const timeSinceLastTrack = currentTime - lastTrackData.timestamp;
  const thresholdMinutes = config.inactivityThreshold.minutes;
  const thresholdSeconds = thresholdMinutes * 60;
  
  const isCurrentlyInactive = timeSinceLastTrack > thresholdSeconds;
  const wasPreviouslyActive = userStates.get(username) === 'active';
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  userStates.set(username, isCurrentlyInactive ? 'inactive' : 'active');
  
  // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∞–º–µ —Å—Ç–∞–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –ê–ë–û —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ —ñ –≤—ñ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
  const isFirstRun = userStates.get(username + '_initialized') !== true;
  
  if ((isCurrentlyInactive && wasPreviouslyActive) || (isCurrentlyInactive && isFirstRun)) {
    userStates.set(username + '_initialized', true);
    const minutesInactive = Math.floor(timeSinceLastTrack / 60);
    const hoursInactive = Math.floor(minutesInactive / 60);
    const daysInactive = Math.floor(hoursInactive / 24);
    
    let timeMessage = '';
    if (daysInactive > 0) {
      timeMessage = `${daysInactive} –¥–Ω—ñ–≤ ${hoursInactive % 24} –≥–æ–¥–∏–Ω`;
    } else if (hoursInactive > 0) {
      timeMessage = `${hoursInactive} –≥–æ–¥–∏–Ω ${minutesInactive % 60} —Ö–≤–∏–ª–∏–Ω`;
    } else {
      timeMessage = `${minutesInactive} —Ö–≤–∏–ª–∏–Ω`;
    }
    
    const message = `‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π Last.fm –ø—Ä–æ—Ñ—ñ–ª—å!\n\n` +
                   `üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}\n` +
                   `‚è∞ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π: ${timeMessage}\n` +
                   `üîó –ü—Ä–æ—Ñ—ñ–ª—å: ${user.lastfmProfile}`;
    
    try {
      if (config.telegram.chatId === 'YOUR_CHAT_ID') {
        console.log(`‚ùå –ù–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–û: Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è ${username}`);
        console.log(`üì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message}`);
        console.log(`üîß –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ Chat ID, –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏`);
      } else {
        await bot.sendMessage(config.telegram.chatId, message);
        console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${username} (—Å–∞–º–µ —Å—Ç–∞–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º)`);
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è ${username}:`, error.message);
    }
      }
  }

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function checkAllUsers() {
  const startTime = new Date();
  
  let activeUsers = 0;
  let inactiveUsers = 0;
  let newInactiveUsers = 0;
  
  for (const user of config.users) {
    const userStartTime = Date.now();
    await checkUserActivity(user);
    
    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const userState = userStates.get(user.username);
    if (userState === 'active') {
      activeUsers++;
    } else if (userState === 'inactive') {
      inactiveUsers++;
      if (userStates.get(user.username + '_wasActive') !== true) {
        newInactiveUsers++;
        userStates.set(user.username + '_wasActive', true);
      }
    }
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ API
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è cron-–∑–∞–≤–¥–∞–Ω–Ω—è
console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º: ${config.schedule.cron}`);
console.log(`‚è±Ô∏è –ü–æ—Ä—ñ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: ${config.inactivityThreshold.minutes} —Ö–≤–∏–ª–∏–Ω`);
console.log(`üåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å —Å–∏—Å—Ç–µ–º–∏: ${Intl.DateTimeFormat().resolvedOptions().timeZone}`);
if (config.server) {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${config.server.host}:${config.server.port}`);
}

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–≤–¥–∞–Ω–Ω—è
cron.schedule(config.schedule.cron, () => {
  checkAllUsers();
});

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä—à–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞
checkAllUsers();

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Promise:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!'); 